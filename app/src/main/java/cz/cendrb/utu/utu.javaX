
    public boolean addExam(Exam exam) {
        try {
            List<NameValuePair> examData = new ArrayList<NameValuePair>();
            examData.add(new BasicNameValuePair("exam[title]", exam.getTitle()));
            examData.add(new BasicNameValuePair("exam[description]", exam.getDescription()));
            examData.add(new BasicNameValuePair("exam[subject_id]", String.valueOf(exam.getSubject())));
            examData.add(new BasicNameValuePair("exam[additional_info_url]", exam.getAdditionalInfoUrl()));
            examData.add(new BasicNameValuePair("exam[group]", String.valueOf(exam.getGroup())));

            SimpleDateFormat format = new SimpleDateFormat("MM");
            Calendar calendar = new GregorianCalendar();
            calendar.setTime(exam.getDate());
            examData.add(new BasicNameValuePair("exam[date(3i)]", String.valueOf(calendar.get(Calendar.DAY_OF_MONTH))));
            examData.add(new BasicNameValuePair("exam[date(2i)]", format.format(exam.getDate())));
            examData.add(new BasicNameValuePair("exam[date(1i)]", String.valueOf(calendar.get(Calendar.YEAR))));

            String result = getStringFrom(getPOSTResponseWithParams("http://utu.herokuapp.com/exams.whoa", examData));

            return result.equals("success");
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
    }

    public boolean addTask(Task task) {
        try {
            List<NameValuePair> taskData = new ArrayList<NameValuePair>();
            taskData.add(new BasicNameValuePair("task[title]", task.getTitle()));
            taskData.add(new BasicNameValuePair("task[description]", task.getDescription()));
            taskData.add(new BasicNameValuePair("task[subject_id]", String.valueOf(task.getSubject())));
            taskData.add(new BasicNameValuePair("task[additional_info_url]", task.getAdditionalInfoUrl()));
            taskData.add(new BasicNameValuePair("task[group]", String.valueOf(task.getGroup())));

            SimpleDateFormat format = new SimpleDateFormat("MM");
            Calendar calendar = new GregorianCalendar();
            calendar.setTime(task.getDate());
            taskData.add(new BasicNameValuePair("task[date(3i)]", String.valueOf(calendar.get(Calendar.DAY_OF_MONTH))));
            taskData.add(new BasicNameValuePair("task[date(2i)]", format.format(task.getDate())));
            taskData.add(new BasicNameValuePair("task[date(1i)]", String.valueOf(calendar.get(Calendar.YEAR))));

            String result = getStringFrom(getPOSTResponseWithParams("http://utu.herokuapp.com/tasks.whoa", taskData));
            return result.equals("success");
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
    }

    public boolean addEvent(Event event) {
        try {
            List<NameValuePair> eventData = new ArrayList<NameValuePair>();
            eventData.add(new BasicNameValuePair("event[title]", event.getTitle()));
            eventData.add(new BasicNameValuePair("event[description]", event.getDescription()));
            eventData.add(new BasicNameValuePair("event[price]", String.valueOf(event.getPrice())));
            eventData.add(new BasicNameValuePair("event[additional_info_url]", event.getAdditionalInfoUrl()));
            eventData.add(new BasicNameValuePair("event[location]", event.getLocation()));

            SimpleDateFormat format = new SimpleDateFormat("MM");
            Calendar calendar = new GregorianCalendar();
            calendar.setTime(event.getStart());
            eventData.add(new BasicNameValuePair("event[event_start(3i)]", String.valueOf(calendar.get(Calendar.DAY_OF_MONTH))));
            eventData.add(new BasicNameValuePair("event[event_start(2i)]", format.format(event.getStart())));
            eventData.add(new BasicNameValuePair("event[event_start(1i)]", String.valueOf(calendar.get(Calendar.YEAR))));

            calendar.setTime(event.getEnd());
            eventData.add(new BasicNameValuePair("event[event_end(3i)]", String.valueOf(calendar.get(Calendar.DAY_OF_MONTH))));
            eventData.add(new BasicNameValuePair("event[event_end(2i)]", format.format(event.getEnd())));
            eventData.add(new BasicNameValuePair("event[event_end(1i)]", String.valueOf(calendar.get(Calendar.YEAR))));

            calendar.setTime(event.getPay());
            eventData.add(new BasicNameValuePair("event[pay_date(3i)]", String.valueOf(calendar.get(Calendar.DAY_OF_MONTH))));
            eventData.add(new BasicNameValuePair("event[pay_date(2i)]", format.format(event.getPay())));
            eventData.add(new BasicNameValuePair("event[pay_date(1i)]", String.valueOf(calendar.get(Calendar.YEAR))));

            String result = getStringFrom(getPOSTResponseWithParams("http://utu.herokuapp.com/events.whoa", eventData));
            return result.equals("success");
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
    }

    public boolean hideExam(Exam exam) {
        try {
            sendPOSTRequestTo("http://utu.herokuapp.com/exams/" + exam.getId() + "/hide.whoa").getEntity().consumeContent();
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    public boolean hideTask(Task task) {
        try {
            sendPOSTRequestTo("http://utu.herokuapp.com/tasks/" + task.getId() + "/hide.whoa").getEntity().consumeContent();
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    public boolean hideEvent(Event event) {
        try {
            sendPOSTRequestTo("http://utu.herokuapp.com/events/" + event.getId() + "/hide.whoa").getEntity().consumeContent();
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    public boolean showExam(Exam exam) {
        try {
            sendPOSTRequestTo("http://utu.herokuapp.com/exams/" + exam.getId() + "/reveal.whoa").getEntity().consumeContent();
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    public boolean showTask(Task task) {
        try {
            sendPOSTRequestTo("http://utu.herokuapp.com/tasks/" + task.getId() + "/reveal.whoa").getEntity().consumeContent();
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    public boolean showEvent(Event event) {
        try {
            sendPOSTRequestTo("http://utu.herokuapp.com/events/" + event.getId() + "/reveal.whoa").getEntity().consumeContent();
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    public boolean updateEvent(Event event) {
        try {
            List<NameValuePair> eventData = new ArrayList<NameValuePair>();
            eventData.add(new BasicNameValuePair("_method", "patch"));
            eventData.add(new BasicNameValuePair("event[title]", event.getTitle()));
            eventData.add(new BasicNameValuePair("event[description]", event.getDescription()));
            eventData.add(new BasicNameValuePair("event[location]", String.valueOf(event.getLocation())));
            eventData.add(new BasicNameValuePair("event[additional_info_url]", event.getAdditionalInfoUrl()));
            eventData.add(new BasicNameValuePair("event[price]", String.valueOf(event.getPrice())));

            SimpleDateFormat format = new SimpleDateFormat("MM");
            Calendar calendar = new GregorianCalendar();

            calendar.setTime(event.getStart());
            eventData.add(new BasicNameValuePair("event_start[date(3i)]", String.valueOf(calendar.get(Calendar.DAY_OF_MONTH))));
            eventData.add(new BasicNameValuePair("event_start[date(2i)]", format.format(event.getStart())));
            eventData.add(new BasicNameValuePair("event_start[date(1i)]", String.valueOf(calendar.get(Calendar.YEAR))));

            calendar.setTime(event.getStart());
            eventData.add(new BasicNameValuePair("event_end[date(3i)]", String.valueOf(calendar.get(Calendar.DAY_OF_MONTH))));
            eventData.add(new BasicNameValuePair("event_end[date(2i)]", format.format(event.getEnd())));
            eventData.add(new BasicNameValuePair("event_end[date(1i)]", String.valueOf(calendar.get(Calendar.YEAR))));

            calendar.setTime(event.getPay());
            eventData.add(new BasicNameValuePair("pay_date[date(3i)]", String.valueOf(calendar.get(Calendar.DAY_OF_MONTH))));
            eventData.add(new BasicNameValuePair("pay_date[date(2i)]", format.format(event.getPay())));
            eventData.add(new BasicNameValuePair("pay_date[date(1i)]", String.valueOf(calendar.get(Calendar.YEAR))));

            String result = getStringFrom(getPOSTResponseWithParams("http://utu.herokuapp.com/event/" + event.getId() + ".whoa", eventData));
            return result.equals("success");
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
    }

    public boolean updateTask(Task task) {
        try {
            List<NameValuePair> taskData = new ArrayList<NameValuePair>();
            taskData.add(new BasicNameValuePair("_method", "patch"));
            taskData.add(new BasicNameValuePair("task[title]", task.getTitle()));
            taskData.add(new BasicNameValuePair("task[description]", task.getDescription()));
            taskData.add(new BasicNameValuePair("task[subject_id]", String.valueOf(task.getSubject())));
            taskData.add(new BasicNameValuePair("task[additional_info_url]", task.getAdditionalInfoUrl()));
            taskData.add(new BasicNameValuePair("task[group]", String.valueOf(task.getGroup())));

            SimpleDateFormat format = new SimpleDateFormat("MM");
            Calendar calendar = new GregorianCalendar();
            calendar.setTime(task.getDate());
            taskData.add(new BasicNameValuePair("task[date(3i)]", String.valueOf(calendar.get(Calendar.DAY_OF_MONTH))));
            taskData.add(new BasicNameValuePair("task[date(2i)]", format.format(task.getDate())));
            taskData.add(new BasicNameValuePair("task[date(1i)]", String.valueOf(calendar.get(Calendar.YEAR))));

            String result = getStringFrom(getPOSTResponseWithParams("http://utu.herokuapp.com/tasks/" + task.getId() + ".whoa", taskData));
            return result.equals("success");
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
    }

    public boolean updateExam(Exam exam) {
        try {
            List<NameValuePair> examData = new ArrayList<NameValuePair>();
            examData.add(new BasicNameValuePair("_method", "patch"));
            examData.add(new BasicNameValuePair("exam[title]", exam.getTitle()));
            examData.add(new BasicNameValuePair("exam[description]", exam.getDescription()));
            examData.add(new BasicNameValuePair("exam[subject_id]", String.valueOf(exam.getSubject())));
            examData.add(new BasicNameValuePair("exam[additional_info_url]", exam.getAdditionalInfoUrl()));
            examData.add(new BasicNameValuePair("exam[group]", String.valueOf(exam.getGroup())));

            SimpleDateFormat format = new SimpleDateFormat("MM");
            Calendar calendar = new GregorianCalendar();
            calendar.setTime(exam.getDate());
            examData.add(new BasicNameValuePair("exam[date(3i)]", String.valueOf(calendar.get(Calendar.DAY_OF_MONTH))));
            examData.add(new BasicNameValuePair("exam[date(2i)]", format.format(exam.getDate())));
            examData.add(new BasicNameValuePair("exam[date(1i)]", String.valueOf(calendar.get(Calendar.YEAR))));

            String result = getStringFrom(getPOSTResponseWithParams("http://utu.herokuapp.com/exams/" + exam.getId() + ".whoa", examData));
            return result.equals("success");
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
    }

    public boolean deleteEvent(int id) {
        try {
            List<NameValuePair> data = new ArrayList<NameValuePair>();
            data.add(new BasicNameValuePair("_method", "delete"));
            String result = getStringFrom(getPOSTResponseWithParams("http://utu.herokuapp.com/events/" + id + ".whoa", data));
            return result.equals("success");
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }

    public boolean deleteExam(int id) {
        try {
            List<NameValuePair> data = new ArrayList<NameValuePair>();
            data.add(new BasicNameValuePair("_method", "delete"));
            String result = getStringFrom(getPOSTResponseWithParams("http://utu.herokuapp.com/exams/" + id + ".whoa", data));
            return result.equals("success");
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }

    public boolean deleteTask(int id) {
        try {
            List<NameValuePair> data = new ArrayList<NameValuePair>();
            data.add(new BasicNameValuePair("_method", "delete"));
            String result = getStringFrom(getPOSTResponseWithParams("http://utu.herokuapp.com/tasks/" + id + ".whoa", data));
            return result.equals("success");
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }

